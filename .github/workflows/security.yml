name: pgbalancer Security Scan

# Only run manually for security scans
on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'full'
        type: choice
        options:
        - quick
        - full
        - dependency
        - code
      fail_on_high:
        description: 'Fail on HIGH severity issues'
        required: false
        default: true
        type: boolean
      generate_report:
        description: 'Generate detailed security report'
        required: false
        default: true
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependency' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autotools-dev \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libjson-c-dev \
          libyaml-dev \
          libpq-dev \
          libssl-dev \
          libpam0g-dev \
          libldap2-dev
        
    - name: Configure and build
      run: |
        ./configure --with-openssl --with-pam --with-ldap
        make -C bin/bctl
        make -C src
        
    - name: Check for known vulnerabilities in dependencies
      run: |
        echo "Checking for known vulnerabilities in system dependencies..."
        
        # Check for known CVE in common libraries
        echo "Checking libjson-c..."
        pkg-config --modversion json-c
        
        echo "Checking libyaml..."
        pkg-config --modversion yaml-0.1
        
        echo "Checking libpq..."
        pkg-config --modversion libpq
        
        echo "Dependency version check completed"
        
    - name: Generate dependency report
      if: ${{ github.event.inputs.generate_report == 'true' }}
      run: |
        echo "# Dependency Security Report" > dependency-security-report.md
        echo "Generated on: $(date)" >> dependency-security-report.md
        echo "" >> dependency-security-report.md
        echo "## System Dependencies" >> dependency-security-report.md
        echo "" >> dependency-security-report.md
        
        # List installed packages
        echo "### Installed Packages" >> dependency-security-report.md
        dpkg -l | grep -E "(json-c|yaml|libpq|ssl|pam)" >> dependency-security-report.md
        
        echo "" >> dependency-security-report.md
        echo "### Library Versions" >> dependency-security-report.md
        pkg-config --modversion json-c >> dependency-security-report.md || echo "json-c: not found"
        pkg-config --modversion yaml-0.1 >> dependency-security-report.md || echo "yaml: not found"
        pkg-config --modversion libpq >> dependency-security-report.md || echo "libpq: not found"
        
    - name: Upload dependency security reports
      if: ${{ github.event.inputs.generate_report == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: dependency-security-report
        path: dependency-security-report.md
        retention-days: 30

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          autotools-dev \
          autoconf \
          automake \
          libtool \
          pkg-config \
          libjson-c-dev \
          libyaml-dev \
          libpq-dev \
          libssl-dev \
          libpam0g-dev \
          libldap2-dev
        
    - name: Configure and build
      run: |
        ./configure --with-openssl --with-pam --with-ldap
        make -C bin/bctl
        make -C src
        
    - name: Run static analysis tools
      run: |
        echo "Running static analysis tools..."
        
        # Install static analysis tools
        sudo apt-get install -y cppcheck clang-tools
        
        # Run cppcheck
        echo "Running cppcheck..."
        cppcheck --enable=all --error-exitcode=1 --force . || echo "cppcheck found issues"
        
        # Run clang static analyzer
        echo "Running clang static analyzer..."
        scan-build make clean || echo "scan-build completed"
        
    - name: Check for common security issues
      run: |
        echo "Checking for common security issues..."
        
        # Check for dangerous functions
        echo "Checking for dangerous C functions..."
        find . -name "*.c" -o -name "*.h" | xargs grep -l "strcpy\|sprintf\|gets\|scanf" || echo "No obvious dangerous functions found"
        
        # Check for buffer overflow patterns
        echo "Checking for buffer overflow patterns..."
        find . -name "*.c" -o -name "*.h" | xargs grep -l "memcpy\|memmove\|strcat" || echo "No obvious buffer overflow patterns found"
        
        # Check for format string vulnerabilities
        echo "Checking for format string vulnerabilities..."
        find . -name "*.c" -o -name "*.h" | xargs grep -l "printf\|sprintf\|fprintf" || echo "No obvious format string issues found"
        
    - name: Check for hardcoded credentials
      run: |
        echo "Checking for hardcoded credentials..."
        
        # Check for hardcoded passwords, keys, secrets
        grep -r -i "password\|secret\|key\|token" --include="*.c" --include="*.h" . || echo "No hardcoded credentials found"
        
        # Check for hardcoded URLs and IPs
        grep -r -E "https?://[0-9]" --include="*.c" --include="*.h" . || echo "No hardcoded URLs found"
        
    - name: Check for memory safety issues
      run: |
        echo "Checking for memory safety issues..."
        
        # Check for malloc without free
        find . -name "*.c" | xargs grep -l "malloc\|calloc\|realloc" | while read file; do
          if ! grep -q "free" "$file"; then
            echo "Potential memory leak in $file"
          fi
        done
        
        # Check for double free patterns
        find . -name "*.c" | xargs grep -l "free.*free" || echo "No obvious double free patterns found"
        
    - name: Generate code security report
      if: ${{ github.event.inputs.generate_report == 'true' }}
      run: |
        echo "# Code Security Report" > code-security-report.md
        echo "Generated on: $(date)" >> code-security-report.md
        echo "" >> code-security-report.md
        echo "## Static Analysis Results" >> code-security-report.md
        echo "Static analysis completed - see build logs for details" >> code-security-report.md
        echo "" >> code-security-report.md
        echo "## Security Checks" >> code-security-report.md
        echo "Security checks completed - see build logs for details" >> code-security-report.md
        
    - name: Upload code security reports
      if: ${{ github.event.inputs.generate_report == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: code-security-report
        path: code-security-report.md
        retention-days: 30

  configuration-scan:
    name: Configuration Security Scan
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.scan_type == 'full' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check configuration files
      run: |
        echo "Checking configuration files for security issues..."
        
        # Check for default passwords
        find . -name "*.conf" -o -name "*.yaml" -o -name "*.yml" | xargs grep -l "password.*=.*password\|admin.*=.*admin" || echo "No obvious default passwords found"
        
        # Check for insecure configurations
        find . -name "*.conf" -o -name "*.yaml" -o -name "*.yml" | xargs grep -l "ssl.*=.*false\|encryption.*=.*false" || echo "No obvious insecure configurations found"
        
        # Check for debug settings in production configs
        find . -name "*.conf" -o -name "*.yaml" -o -name "*.yml" | xargs grep -l "debug.*=.*true\|verbose.*=.*true" || echo "No obvious debug settings found"
        
    - name: Check for exposed secrets
      run: |
        echo "Checking for exposed secrets..."
        
        # Check for API keys, tokens, etc.
        grep -r -E "sk-[a-zA-Z0-9]{20,}" . || echo "No obvious API keys found"
        grep -r -E "pk_[a-zA-Z0-9]{20,}" . || echo "No obvious public keys found"
        grep -r -E "[0-9a-f]{32}" . || echo "No obvious MD5 hashes found"
        
    - name: Generate configuration security report
      if: ${{ github.event.inputs.generate_report == 'true' }}
      run: |
        echo "# Configuration Security Report" > config-security-report.md
        echo "Generated on: $(date)" >> config-security-report.md
        echo "" >> config-security-report.md
        echo "## Configuration Checks" >> config-security-report.md
        echo "Configuration security checks completed - see build logs for details" >> config-security-report.md
        
    - name: Upload configuration security reports
      if: ${{ github.event.inputs.generate_report == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: config-security-report
        path: config-security-report.md
        retention-days: 30

  notify-completion:
    name: Notify Security Scan Completion
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, configuration-scan]
    if: always()
    
    steps:
    - name: Security Scan Summary
      run: |
        echo "pgbalancer Security Scan Summary"
        echo "=================================="
        echo ""
        echo "Scan Details:"
        echo "  Scan Type: ${{ github.event.inputs.scan_type }}"
        echo "  Fail on High: ${{ github.event.inputs.fail_on_high }}"
        echo "  Generate Report: ${{ github.event.inputs.generate_report }}"
        echo "  Triggered by: @${{ github.actor }}"
        echo ""
        echo "Results:"
        echo "  Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "  Code Scan: ${{ needs.code-scan.result }}"
        echo "  Configuration Scan: ${{ needs.configuration-scan.result }}"
        echo ""
        echo "Security scan process completed!"
